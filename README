README - ASSIGNMENT 1
=====================

1. AUTHOR
=========
SAGAR JEEVAN

2. AUTHOR EMAIL ID
==================
sjeevan@cs.stonybrook.edu

3. PROBLEM STATEMENT
====================
Create a Linux kernel module (in vanilla 4.20.y Linux that's in your HW1 GIT
repository) that, when loaded into Linux, will support a new system call
called,
        sys_cpenc(infile, outfile, keybuf, keylen, flags)

where "infile" is the name of an input file to encrypt or decrypt, "outfile"
is the output file, "keybuf" is a buffer holding the cipher key, "keylen" is
the length of that buffer, and "flags" determine if you're encrypting or
decrypting.

4. FILES NEEDED
===============
/usr/src/hw1-sjeevan/CSE-506/README.md (contains information on how to utilise the system call)
/usr/src/hw1-sjeevan/CSE-506/kernel.config (contains kernel configurations)
/usr/src/hw1-sjeevan/CSE-506/sys_cpenc.c (Kernel File)
/usr/src/hw1-sjeevan/CSE-506/xhw1.c (User File)
/usr/src/hw1-sjeevan/CSE-506/Makefile (contains commands to compile files)
/usr/src/hw1-sjeevan/CSE-506/io_filename.h (Common File between user and kernel)
/usr/src/hw1-sjeevan/CSE-506/run_test (runs 10 test scripts)
/usr/src/hw1-sjeevan/CSE-506/install_module.sh (list, remove, and install module)

5. USAGE
========
./xhw1 -[c|e|d] input output -p password

[-c]: copy input to output
[-e]: encrypt input file and write to output
[-d]: decrypt inout file and write to output
[-p]: enter a password
[-h]: help

6. SYSTEM CALL DESIGN
=====================
    6.1 USER-LAND
    =============
    1. There is a user space file that requests the system call to encrypt, decrypt, or copy a file.

    2. The user parameters is taken from the command line arguments. The getopt command is used to parse the input. The user can input the parameters as given below.
        * ./xhw1 -c input_file output_file -p password [copy input_file to output_file]
        * ./xhw1 -e input_file output_file -p password [encrypt input_file to output_file]
        * ./xhw1 -d input_file output_file -p password [decrypt input_file to output_file]

        The password should be atleast 6, and atmost 256 characters. The arguments can be given in any order. For example, even the below commands are valid.

        * ./xhw1 -p password -c input_file output_file [copy input_file to output_file]
        * ./xhw1 -p password -e input_file output_file [encrypt input_file to output_file]
        * ./xhw1 -p password -d input_file output_file [decrypt input_file to output_file]

    3. Once the user passes his parameters, the user program invokes a system call by calling the interrupt handler. The arguments are passed on from user space to kernel by a custom structure available "io_filenames.h" header file. The contents of the header file are:

    typedef struct{
        char *input, *output; [contains input, and output file path]
        unsigned char *hash; [contains the SHA256 hash value of password]
        int key_length, ED_unit; [default key and block size]
        int EDC_flag; [to indicate encrypt, decrypt, or copy]
    }Files;

    4. The program performs various checks to validate the parameters passed by a user. For example,
        * The program checks if the input file name is a valid file. The program also takes into account directory paths. So, a user can input the input file pathname.
        * The program checks if the output file name is a valid file. The program also takes into account directory paths. So, a user can input the output file pathname.
        * The program checks if the password is of length less than 6 and atmost of 256 characters.
        * The program checks if the user has input invalid parameters such as multiple/invalid flags, wrong arguments for a flag.

    5. After the parameters are checked if they conform to the syntax, now the program checks if they are indeed valid parameters.
    The checks below include for an input file.
        * Is the input file path name valid?
        * Does the input file exist?
        * Is the input file a regular file?
        * Does the input file have read permissions?

    The checks below include for an input file.
        * Is the output file path name valid?
        * Does the output file exist? If not, create a new file.
        * Is the output file a regular file?
        * Does the output file have write permissions?

    6. Later, a SHA256 32 bit digest is created for the password passed.

    7. If all of these succeed, the user program now calls the system call. The parameters are passed on to the kernel program via a void pointer. This is because, linux kernel supports the passsage of maximum 6 parameters through registers. This design approach allows us to include more parameters in future.

    6.2 KERNEL-LAND
    ==========
    1. The program creates a new structure from the "io_filenames.h" header file. The program then copies the parameters from the user via a function - copy_from_user.

    2. Once the kernel copies all the parameters from the user, it checks for the validity of the parameters. The checks include the same as the user program.

    3. The current process UID, and GID is compared with the file's credentials obtained by vfs_stat. If they match, then the program continues, else if raises an error. Other users cannot have access to this file at any point in time. The output file permissions are set to inout file's permissions.

    4. The file is then opened via the command - filp_open. The program checks if the input files are regular files and if they are the same file (symbolic links to the same root).

    5. The program then checks if the user wants to encrypt or decrypt a file.
        * If they want to encrypt it, the hashed key, and IV data is added to the preamble of the output file.
            * CONTENTS OF THE PREAMBLE
                - hashed key (SHA256) [32 BYTES]
                - IV data [16 BYTES]
            * The IV data is randomly generated for each block of data that is encrypted. This adds an additional layer of security to the encrypted data.
        * If they want to decrypt a file, the key is retrieved from the preamble as used.  

    6. The output file's credentials is set to current process' UID, and GID.

    7. If any error occurs during encryption or decryption, the partially created file is deleted.

    8. Any error occurred during the program is notified back to the user by using appropriate error commands. Some of the commands used are.
        * -ENOENT (no such file or directory)
        * -EAGAIN (try again)
        * -ENOMEM (no memory)
        * -EINVAL (invalid parameters)
        * -EPERM (permission denied)

    9. The program denies any request to decrypt the file with a different key.

    10. The program performs encryption, or decryption on various input sizes (less than, equal to, more than block size)

    11. Any dynamically allocated resources are set free.

    6.3 KERNEL-CONFIG
    =================
    This includes less than 1100 kernel configurations.

7. TESTING
==========
The CSE-506 directory includes 10 test cases each named by test**.sh file. These are shell scripts that are used to test various workings of the program.
    * test01.sh - Tests the system call by various sizes of input file (less than, equal to, more than block size)
    * test02.sh - Tests the system call by encrypting/decrypting using different passwords.
    * test03.sh - Tests copy files for different input sizes (small, medium, large).
    * test04.sh - Tests the system call by wrong encryption/decryption parameters.
    * test05.sh - Tests encryption/decryption of files for different input sizes (small, medium, large).
    * test06.sh - Tests to check if encrypted/decrypted files are different.
    * test07.sh - Tests to check if 6 < password length < 256 characters.
    * test08.sh - Tests the system call by inputing wrong parameters.
    * test09.sh - Tests the system call by passing valid arguments in a different order.
    * test10.sh - Tests the system call by passing file paths of input and output file.

    To run the test cases, use 'sh run_test" on command line. This will run all the tests!

8. SAMPLE
=========
The directory includes a sample test file "sample_test.txt". Use this to encrypt and decrypt the file.
	* ./xhw1 -e sample_test.txt sample_enc -p sample_password
	* ./xhw1 -d sample_enc sample_output -p sample_password
Compare the input, and output files.
	* diff -iw sample_test.txt sample_output
If there is any output, there is an error. Else, you have your file successfully encrypted and decrypted!

9. References
=============
1. http://www.chronox.de/crypto-API/crypto/api-samples.html [encryption and decryption API]
2. http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html [error codes]
3. https://www.linuxjournal.com/article/8110
4. https://www.linuxjournal.com/article/6930
5. https://elixir.bootlin.com/linux/latest/source/include/linux/fs.h [inode structure]
6. https://elixir.bootlin.com/linux/v4.20.6/source/include/linux/dcache.h [dentry structure]
7. https://stackoverflow.com/questions/24290273/check-if-input-file-is-a-valid-file-in-c
8. https://stackoverflow.com/questions/19598497/check-if-a-folder-is-writable
9. https://stackoverflow.com/questions/37897767/error-handling-checking-in-the-kernel-realm

10. EXTRA CREDIT
===============
1. The IV data is randomly generated for each block of data that is encrypted. This adds an additional layer of security to the encrypted data.
